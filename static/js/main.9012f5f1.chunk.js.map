{"version":3,"sources":["url_config.js","components/Form.js","components/Map.js","components/Description.js","App.js","serviceWorker.js","index.js","icons/039-tent.svg","icons/010-bonfire.svg","icons/009-binoculars.svg"],"names":["config","url","API_URL","Form","props","mode","react_default","a","createElement","onSubmit","e","preventDefault","data","URLSearchParams","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","FormData","target","Symbol","iterator","next","done","pair","value","append","err","return","fetch","method","headers","Content-Type","body","then","res","console","log","removeData","className","action","readOnly","type","step","name","id","lon","lat","for","required","placeholder","ol","require","iconMapping","camping","bonfire","view","viewPoint","Map","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pointId","extraLayer","layer","Vector","source","features","featuresLayer","map","refs","mapContainer","layers","Tile","OSM","View","center","proj","fromLonLat","zoom","on","handleMapClick","bind","setState","prevProps","prevState","_this2","json","points","forEach","icon","style","Icon","opacity","scale","src","iconStyle","Style","image","coords","localisation","iconFeature","Feature","geometry","geom","Point","description","rating","setStyle","push","setSource","setData","catch","error","pointData","find","setPointDescription","event","pointDescription","forEachFeatureAtPixel","pixel","feature","get","coord","toLonLat","coordinate","newFeature","_this3","ref","components_Form","React","Component","Description","_useState","useState","_useState2","slicedToArray","reviews","setReviews","useEffect","onClick","rev","title","dataForm","min","max","App","_useState3","_useState4","setMode","_useState5","_useState6","switchText","setSwitchText","_useState7","_useState8","newMode","components_Map","components_Description","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9012f5f1.chunk.js","sourcesContent":["\nconst prod = {\n    url: {\n        API_URL: 'https://db-truso-map-space.herokuapp.com'\n    }\n};\nconst dev = {\n    url: {\n        API_URL: 'http://localhost:8000'\n    }\n};\nexport const config = process.env.NODE_ENV === 'development' ? dev: prod;","import React from 'react';\nimport { config } from '../url_config'\nconst url = config.url.API_URL\n\nfunction Form(props) {\n\n\n    const postPoint = (e) => {\n        e.preventDefault();\n\n        const data = new URLSearchParams();\n        for (const pair of new FormData(e.target)) {\n            data.append(pair[0], pair[1]);\n        }\n\n        fetch(url + \"/api/points\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: data\n        })\n            .then((res) => {\n                console.log('success');\n                props.removeData();\n            })\n    }\n\n    return (\n        props.mode === 'explore' ? '' :\n            <div>\n                <form onSubmit={postPoint} className=\"flexcontainer\" action=\"http://localhost:8000/api/points\" method=\"post\" >\n                    <h3>Add new location  </h3>\n                    <input className=\"d-none\" readOnly type=\"number\" step=\"any\" name=\"lon\" id=\"lon\" value={props.lon}></input>\n                    <input className=\"d-none\" readOnly type=\"number\" step=\"any\" name=\"lat\" id=\"lat\" value={props.lat}></input>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"name\">Name:</label>\n                        <input required className=\"form-control input-sm\" placeholder=\"place name\" type=\"text\" name=\"name\" id=\"name\"></input>\n                    </div>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"description\">Description:</label>\n                        <input className=\"form-control input-sm\" placeholder=\"place decription\" type=\"text\" name=\"description\" id=\"description\"></input>\n                    </div>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"type\">Select type:</label>\n                        <select className=\"form-control input-sm\" id=\"type\" name=\"type\">\n                            <option>camping</option>\n                            <option>bonfire</option>\n                            <option>view</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-dark btn-bg\">Go</button>\n                </form>\n            </div>\n\n\n    )\n}\n// className=\"d-none\"\n// action=\"http://localhost:8000/api/points\" method=\"post\"\nexport default Form;","import React from 'react';\nimport Form from './Form';\nimport camping from '../icons/039-tent.svg';\nimport bonfire from '../icons/010-bonfire.svg';\nimport viewPoint from '../icons/009-binoculars.svg';\n\nimport { config } from '../url_config'\nconst url = config.url.API_URL\n\nconst ol = require('openlayers');\nrequire('openlayers/css/ol.css');\n\nconst iconMapping = {\n    camping: camping,\n    bonfire: bonfire,\n    view: viewPoint\n}\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            lon: 18,\n            lat: 60,\n            pointId: null\n        });\n    }\n\n    componentDidMount() {\n        const extraLayer = new ol.layer.Vector({\n            source: new ol.source.Vector({\n                features: []\n            })\n        });\n        const featuresLayer = new ol.layer.Vector({\n            source: new ol.source.Vector({\n                features: []\n            })\n        });\n\n        var map = new ol.Map({\n            target: this.refs.mapContainer,\n            layers: [\n                new ol.layer.Tile({\n                    source: new ol.source.OSM()\n                }),\n                extraLayer,\n                featuresLayer\n            ], view: new ol.View({\n                center: ol.proj.fromLonLat([17.862083241832443, 59.301848231069636]),\n                zoom: 11,\n            })\n        });\n\n        map.on('click', this.handleMapClick.bind(this));\n\n        this.setState({\n            map: map,\n            extraLayer: extraLayer,\n            featuresLayer: featuresLayer\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.data === null) {\n            console.log('updating data');\n            fetch(url + '/api/points')\n                .then(res => res.json())\n                .then(data => {\n                    const features = [];\n\n                    data.points.forEach((e) => {\n                        const icon = new ol.style.Icon({\n                            opacity: 1,\n                            scale: 0.05,\n                            src: iconMapping[e.type]\n                        });\n\n                        const iconStyle = new ol.style.Style({\n                            image: icon\n                        });\n\n                        const coords = ol.proj.fromLonLat(e.localisation);\n                        const iconFeature = new ol.Feature({\n                            id: e.id,\n                            geometry: new ol.geom.Point(coords),\n                            name: e.name,\n                            description: e.description,\n                            rating: e.rating\n                        });\n                        iconFeature.setStyle(iconStyle);\n                        features.push(iconFeature);\n                    })\n\n                    this.state.featuresLayer.setSource(\n                        new ol.source.Vector({\n                            features: features\n                        })\n                    );\n                    this.props.setData(data);\n                })\n                .catch(error => console.log(error));\n        }\n        else if (this.state.pointId) {\n            const pointData = this.props.data.points.find(e =>\n                e.id === this.state.pointId);\n            // console.log(pointData);\n            console.log('setting point description');\n            this.props.setPointDescription(pointData);\n        }\n\n    }\n\n    handleMapClick(event) {\n        ///popout ///\n\n        let pointDescription = {};\n        let pointId = null;\n        this.state.map.forEachFeatureAtPixel(event.pixel,\n            feature => {\n                console.log(feature.get('id'));\n                pointDescription = {\n                    id: feature.get('id'),\n                    name: feature.get('name'),\n                    description: feature.get('description'),\n                    rating: feature.get('rating')\n                }\n                pointId = feature.get('id');\n            });\n        this.setState({ pointId: pointId });\n        this.props.setPointDescription(pointDescription);\n\n        ///////adding data/////////\n        const coord = ol.proj.toLonLat(event.coordinate);\n        console.log(coord);\n        this.setState({\n            lon: coord[0],\n            lat: coord[1]\n        });\n\n        const features = [];\n\n        const coords = event.coordinate;\n        const newFeature = new ol.Feature({\n            geometry: new ol.geom.Point(coords)\n        })\n\n        features.push(newFeature);\n\n        this.state.extraLayer.setSource(\n            new ol.source.Vector({\n                features: features\n            })\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div ref=\"mapContainer\" id=\"mapContainer\"></div>\n                <Form mode={this.props.mode} lon={this.state.lon} lat={this.state.lat} removeData={() => this.props.setData(null)}></Form>\n            </div>\n        );\n    }\n\n}\nexport default Map;","import React, { useState, useEffect } from 'react';\nimport { config } from '../url_config'\nconst url = config.url.API_URL\n\nfunction Description(props) {\n    const [reviews, setReviews] = useState('');\n    useEffect(() => {\n        setReviews('');\n    }, [props.pointDescription.id]);\n\n    const fetchMorePointData = () => {\n        console.log('click');\n        //get request to api/points/:id\n        fetch(url + \"api/points/\" + props.pointDescription.id)\n            .then(res => res.json())\n            .then(res => {\n                console.log(res.rev)\n                const rev = res.rev.map(e => {\n                    return (\n                        <div className=\"flexcontainercolumn\">\n                            <br></br>\n                            <h5>{e.title}</h5>\n                            <p> {e.description} </p>\n                            <h5>rated: {e.rating}</h5>\n                        </div>\n                    )\n                })\n                setReviews(rev);\n            });\n    }\n\n    const submitReview = (e) => {\n        e.preventDefault();\n        const dataForm = new URLSearchParams();\n        for (const pair of new FormData(e.target)) {\n            dataForm.append(pair[0], pair[1]);\n        }\n\n        fetch(url + \"/api/points/\" + props.pointDescription.id, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: dataForm\n        })\n            .then(() => {\n                props.setData(null);\n                props.setPointDescription({});\n            });\n    }\n\n    return (\n        (!props.pointDescription.id || props.mode === 'edit') ?\n            '' :\n            <div className=\"flexcontainercolumn\">\n                <h1>\n                    {props.pointDescription.name}\n                </h1>\n                <p>\n                    {props.pointDescription.description}\n                    <br />\n                    rating: {props.pointDescription.rating}\n                </p>\n                <button type=\"click\" onClick={fetchMorePointData} className=\"btn btn-dark btn-sm\">Show reviews</button>\n\n                {reviews}\n                <form className=\"flexcontainer\" onSubmit={submitReview}>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"title\">Title:</label>\n                        <input className=\"form-control input-sm\" placeholder=\"title\" required name=\"title\" id=\"title\"></input>\n                    </div>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"description\">Description:</label>\n                        <input className=\"form-control input-sm\" placeholder=\"description\" name=\"description\" id=\"description\"></input>\n                    </div>\n                    <div className=\"flexcontainercolumn\">\n                        <label for=\"rating\">Rating:</label>\n                        <input className=\"form-control input-sm\" required min=\"1\" max=\"10\" name=\"rating\" id=\"rating\" type=\"number\"></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-dark btn-bg\">Review</button>\n                </form>\n\n            </div>\n\n    )\n}\n\nexport default Description;","import React, { useState } from 'react';\nimport Map from './components/Map';\nimport Description from './components/Description';\nfunction App() {\n  const [pointDescription, setPointDescription] = useState({});\n  const [mode, setMode] = useState('explore');\n  const [switchText, setSwitchText] = useState('Edit map');\n  const [data, setData] = useState(null);\n\n  const switchMode = () => {\n    const newMode = (mode === 'explore') ? 'edit' : 'explore';\n    const switchText = (newMode === 'explore') ? 'Edit map' : 'Explore';\n    setMode(newMode);\n    setSwitchText(switchText);\n  };\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <h1 className=\"text-light\">\n          Your Map Space\n    </h1>\n        <button id=\"switch modes\" onClick={switchMode}>{switchText}</button>\n      </nav>\n\n      <Map pointDescription={pointDescription} setPointDescription={setPointDescription} mode={mode} data={data} setData={setData}></Map>\n      <Description pointDescription={pointDescription} setPointDescription={setPointDescription} mode={mode} data={data} setData={setData}></Description>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n","module.exports = __webpack_public_path__ + \"static/media/039-tent.ebd03a54.svg\";","module.exports = __webpack_public_path__ + \"static/media/010-bonfire.21b76057.svg\";","module.exports = __webpack_public_path__ + \"static/media/009-binoculars.6b6a714c.svg\";"],"sourceRoot":""}